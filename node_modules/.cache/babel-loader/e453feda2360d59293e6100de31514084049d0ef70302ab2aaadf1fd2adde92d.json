{"ast":null,"code":"// src/api/fetchStockData.ts\n\nconst API_KEY = process.env.REACT_APP_API_KEY || 'cpm1km1r01qn8g1vebf0cpm1km1r01qn8g1vebfg';\nconst STOCK_API_URL = `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${API_KEY}`;\nconst QUOTE_API_URL = symbol => `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${API_KEY}`;\n_c = QUOTE_API_URL;\nconst PROFILE_API_URL = symbol => `https://finnhub.io/api/v1/stock/profile2?symbol=${symbol}&token=${API_KEY}`;\n_c2 = PROFILE_API_URL;\nexport const fetchStockData = async () => {\n  try {\n    const response = await fetch(STOCK_API_URL);\n    const data = await response.json();\n    if (!Array.isArray(data) || data.length === 0) {\n      console.error('No stock symbols fetched');\n      return [];\n    }\n    const stockDetails = await Promise.all(data.slice(0, 30).map(async stock => {\n      try {\n        const stockDataResponse = await fetch(QUOTE_API_URL(stock.symbol));\n        const stockData = await stockDataResponse.json();\n        const profileDataResponse = await fetch(PROFILE_API_URL(stock.symbol));\n        const profileData = await profileDataResponse.json();\n        return {\n          symbol: stock.symbol,\n          price: stockData.c,\n          sector: profileData.finnhubIndustry || 'Unknown'\n        };\n      } catch (error) {\n        console.error('Error fetching data for stock:', stock.symbol, error);\n        return null;\n      }\n    }));\n    return stockDetails.filter(stock => stock !== null);\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    return [];\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"QUOTE_API_URL\");\n$RefreshReg$(_c2, \"PROFILE_API_URL\");","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_API_KEY","STOCK_API_URL","QUOTE_API_URL","symbol","_c","PROFILE_API_URL","_c2","fetchStockData","response","fetch","data","json","Array","isArray","length","console","error","stockDetails","Promise","all","slice","map","stock","stockDataResponse","stockData","profileDataResponse","profileData","price","c","sector","finnhubIndustry","filter","$RefreshReg$"],"sources":["/Users/himanshumathur/Documents/Minvest_React_task/minvest-porfolioCalc/src/api/fetchStockData.ts"],"sourcesContent":["// src/api/fetchStockData.ts\nimport { Stock } from '../types/Stock';\n\nconst API_KEY = process.env.REACT_APP_API_KEY || 'cpm1km1r01qn8g1vebf0cpm1km1r01qn8g1vebfg';\nconst STOCK_API_URL = `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${API_KEY}`;\nconst QUOTE_API_URL = (symbol: string) => `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${API_KEY}`;\nconst PROFILE_API_URL = (symbol: string) => `https://finnhub.io/api/v1/stock/profile2?symbol=${symbol}&token=${API_KEY}`;\n\nexport const fetchStockData = async (): Promise<Stock[]> => {\n  try {\n    const response = await fetch(STOCK_API_URL);\n    const data = await response.json();\n\n    if (!Array.isArray(data) || data.length === 0) {\n      console.error('No stock symbols fetched');\n      return [];\n    }\n\n    const stockDetails = await Promise.all(data.slice(0, 30).map(async (stock: any) => {\n      try {\n        const stockDataResponse = await fetch(QUOTE_API_URL(stock.symbol));\n        const stockData = await stockDataResponse.json();\n\n        const profileDataResponse = await fetch(PROFILE_API_URL(stock.symbol));\n        const profileData = await profileDataResponse.json();\n\n        return {\n          symbol: stock.symbol,\n          price: stockData.c,\n          sector: profileData.finnhubIndustry || 'Unknown'\n        } as Stock;\n      } catch (error) {\n        console.error('Error fetching data for stock:', stock.symbol, error);\n        return null;\n      }\n    }));\n\n    return stockDetails.filter((stock): stock is Stock => stock !== null);\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    return [];\n  }\n};\n"],"mappings":"AAAA;;AAGA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,0CAA0C;AAC3F,MAAMC,aAAa,GAAG,4DAA4DJ,OAAO,EAAE;AAC3F,MAAMK,aAAa,GAAIC,MAAc,IAAK,0CAA0CA,MAAM,UAAUN,OAAO,EAAE;AAACO,EAAA,GAAxGF,aAAa;AACnB,MAAMG,eAAe,GAAIF,MAAc,IAAK,mDAAmDA,MAAM,UAAUN,OAAO,EAAE;AAACS,GAAA,GAAnHD,eAAe;AAErB,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAA8B;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,aAAa,CAAC;IAC3C,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;MAC7CC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACzC,OAAO,EAAE;IACX;IAEA,MAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACT,IAAI,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAC,MAAOC,KAAU,IAAK;MACjF,IAAI;QACF,MAAMC,iBAAiB,GAAG,MAAMd,KAAK,CAACP,aAAa,CAACoB,KAAK,CAACnB,MAAM,CAAC,CAAC;QAClE,MAAMqB,SAAS,GAAG,MAAMD,iBAAiB,CAACZ,IAAI,CAAC,CAAC;QAEhD,MAAMc,mBAAmB,GAAG,MAAMhB,KAAK,CAACJ,eAAe,CAACiB,KAAK,CAACnB,MAAM,CAAC,CAAC;QACtE,MAAMuB,WAAW,GAAG,MAAMD,mBAAmB,CAACd,IAAI,CAAC,CAAC;QAEpD,OAAO;UACLR,MAAM,EAAEmB,KAAK,CAACnB,MAAM;UACpBwB,KAAK,EAAEH,SAAS,CAACI,CAAC;UAClBC,MAAM,EAAEH,WAAW,CAACI,eAAe,IAAI;QACzC,CAAC;MACH,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEM,KAAK,CAACnB,MAAM,EAAEa,KAAK,CAAC;QACpE,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CAAC;IAEH,OAAOC,YAAY,CAACc,MAAM,CAAET,KAAK,IAAqBA,KAAK,KAAK,IAAI,CAAC;EACvE,CAAC,CAAC,OAAON,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,EAAE;EACX;AACF,CAAC;AAAC,IAAAZ,EAAA,EAAAE,GAAA;AAAA0B,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAA1B,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}